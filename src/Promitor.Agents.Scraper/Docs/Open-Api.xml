<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Promitor.Agents.Scraper</name>
    </assembly>
    <members>
        <member name="M:Promitor.Agents.Scraper.AzureMonitorClientFactory.CreateIfNotExists(Microsoft.Azure.Management.ResourceManager.Fluent.AzureEnvironment,System.String,System.String,Promitor.Core.Telemetry.Metrics.Interfaces.IRuntimeMetricsCollector,Microsoft.Extensions.Configuration.IConfiguration,Microsoft.Extensions.Options.IOptions{Promitor.Core.Configuration.Model.AzureMonitor.AzureMonitorLoggingConfiguration},Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Provides an Azure Monitor client
            </summary>
            <param name="cloud">Name of the Azure cloud to interact with</param>
            <param name="tenantId">Id of the tenant that owns the Azure subscription</param>
            <param name="subscriptionId">Id of the Azure subscription</param>
            <param name="runtimeMetricCollector">Metrics collector for our runtime</param>
            <param name="configuration">Configuration of Promitor</param>
            <param name="azureMonitorLoggingConfiguration">Options for Azure Monitor logging</param>
            <param name="loggerFactory">Factory to create loggers with</param>
        </member>
        <member name="M:Promitor.Agents.Scraper.Controllers.v1.ConfigurationController.GetMetricDeclaration">
            <summary>
                Get Metrics Declaration
            </summary>
            <remarks>Provides a list of all configured metrics to scrape</remarks>
        </member>
        <member name="M:Promitor.Agents.Scraper.Controllers.v1.ConfigurationController.GetRuntime">
            <summary>
                Get Runtime Configuration
            </summary>
            <remarks>Provides the runtime configuration</remarks>
        </member>
        <member name="M:Promitor.Agents.Scraper.Controllers.v1.HealthController.Get">
            <summary>
                Get Health
            </summary>
            <remarks>Provides an indication about the health of the scraper</remarks>
        </member>
        <member name="M:Promitor.Agents.Scraper.Extensions.IApplicationBuilderExtensions.UsePrometheusScraper(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.String)">
            <summary>
                Add support for exposing a prometheus scraping endpoint
            </summary>
            <param name="app">Application Builder</param>
            <param name="scrapeEndpointPath">Path where the scrape endpoint will be exposed</param>
        </member>
        <member name="M:Promitor.Agents.Scraper.Extensions.IApplicationBuilderExtensions.ExposeOpenApiUi(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
                Add support for Open API with API explorer
            </summary>
            <param name="app">Application Builder</param>
        </member>
        <member name="M:Promitor.Agents.Scraper.Extensions.IServiceCollectionExtensions.ScheduleMetricScraping(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
                Defines to use the cron scheduler
            </summary>
            <param name="services">Collections of services in application</param>
        </member>
        <member name="M:Promitor.Agents.Scraper.Extensions.IServiceCollectionExtensions.DefineDependencies(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
                Defines the dependencies that Promitor requires
            </summary>
            <param name="services">Collections of services in application</param>
        </member>
        <member name="M:Promitor.Agents.Scraper.Extensions.IServiceCollectionExtensions.UseHealthChecks(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
                Use health checks
            </summary>
            <param name="services">Collections of services in application</param>
        </member>
        <member name="M:Promitor.Agents.Scraper.Extensions.IServiceCollectionExtensions.UseWebApi(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
                Expose services as Web API
            </summary>
        </member>
        <member name="M:Promitor.Agents.Scraper.Extensions.IServiceCollectionExtensions.ConfigureYamlConfiguration(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
                Inject configuration
            </summary>
        </member>
        <member name="M:Promitor.Agents.Scraper.Extensions.IServiceCollectionExtensions.UseOpenApiSpecifications(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Int32)">
            <summary>
                Use OpenAPI specification
            </summary>
            <param name="services">Collections of services in application</param>
            <param name="prometheusScrapeEndpointPath">Endpoint where the prometheus scraping is exposed</param>
            <param name="apiVersion">Version of the API</param>
        </member>
        <member name="M:Promitor.Agents.Scraper.Extensions.ObjectExtensions.Clone``1(``0)">
            <summary>
                Clones an object without a reference, the ugly way.
            </summary>
            <typeparam name="TObject">Type of the object to be cloned</typeparam>
            <param name="initialObject">Initial object to clone</param>
        </member>
        <member name="M:Promitor.Agents.Scraper.Validation.MetricDefinitions.Interfaces.IMetricValidator.Validate(Promitor.Core.Scraping.Configuration.Model.Metrics.MetricDefinition)">
            <summary>
                Validates a specific metric definition
            </summary>
            <param name="metricDefinition">Metric definition to validate</param>
            <returns>List of validation errors</returns>
        </member>
        <member name="T:Promitor.Agents.Scraper.Validation.MetricDefinitions.ResourceTypes.SqlDatabaseMetricValidator">
            <summary>
            Validates <see cref="T:Promitor.Core.Scraping.Configuration.Model.Metrics.ResourceTypes.SqlDatabaseResourceDefinition" /> objects.
            </summary>
        </member>
        <member name="M:Promitor.Agents.Scraper.Validation.MetricDefinitions.ResourceTypes.SqlDatabaseMetricValidator.Validate(Promitor.Core.Scraping.Configuration.Model.Metrics.MetricDefinition)">
            <inheritdoc />
        </member>
        <member name="T:Promitor.Agents.Scraper.Validation.MetricDefinitions.ResourceTypes.SqlManagedInstanceMetricValidator">
            <summary>
            Validates <see cref="T:Promitor.Agents.Scraper.Validation.MetricDefinitions.ResourceTypes.SqlManagedInstanceMetricValidator" /> objects.
            </summary>
        </member>
        <member name="M:Promitor.Agents.Scraper.Validation.MetricDefinitions.ResourceTypes.SqlManagedInstanceMetricValidator.Validate(Promitor.Core.Scraping.Configuration.Model.Metrics.MetricDefinition)">
            <inheritdoc />
        </member>
        <member name="M:Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIOptionsExtensions.ConfigureDefaultOptions(Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIOptions)">
            <summary>
            Configure the default options for our Swagger UI portal
            </summary>
            <param name="swaggerUiOptions">Swagger UI portal options</param>
        </member>
    </members>
</doc>
