<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Promitor.Agents.Scraper</name>
    </assembly>
    <members>
        <member name="M:Promitor.Agents.Scraper.AzureMonitorClientFactory.CreateIfNotExists(Microsoft.Azure.Management.ResourceManager.Fluent.AzureEnvironment,System.String,System.String,Promitor.Core.Metrics.Sinks.MetricSinkWriter,Promitor.Core.Metrics.Prometheus.Collectors.Interfaces.IAzureScrapingSystemMetricsPublisher,Microsoft.Extensions.Caching.Memory.IMemoryCache,Microsoft.Extensions.Configuration.IConfiguration,Microsoft.Extensions.Options.IOptions{Promitor.Integrations.AzureMonitor.Configuration.AzureMonitorIntegrationConfiguration},Microsoft.Extensions.Options.IOptions{Promitor.Integrations.AzureMonitor.Configuration.AzureMonitorLoggingConfiguration},Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Provides an Azure Monitor client
            </summary>
            <param name="cloud">Name of the Azure cloud to interact with</param>
            <param name="tenantId">Id of the tenant that owns the Azure subscription</param>
            <param name="subscriptionId">Id of the Azure subscription</param>
            <param name="metricSinkWriter">Writer to send metrics to all configured sinks</param>
            <param name="azureScrapingSystemMetricsPublisher">Metrics collector to write metrics to Prometheus</param>
            <param name="resourceMetricDefinitionMemoryCache">Memory cache to store items in</param>
            <param name="configuration">Configuration of Promitor</param>
            <param name="azureMonitorIntegrationConfiguration">Options for Azure Monitor integration</param>
            <param name="azureMonitorLoggingConfiguration">Options for Azure Monitor logging</param>
            <param name="loggerFactory">Factory to create loggers with</param>
        </member>
        <member name="M:Promitor.Agents.Scraper.Controllers.v1.ConfigurationController.GetMetricDeclaration">
            <summary>
                Get Metrics Declaration
            </summary>
            <remarks>Provides a list of all configured metrics to scrape</remarks>
        </member>
        <member name="M:Promitor.Agents.Scraper.Controllers.v1.ConfigurationController.GetRuntime">
            <summary>
                Get Runtime Configuration
            </summary>
            <remarks>Provides the runtime configuration</remarks>
        </member>
        <member name="M:Promitor.Agents.Scraper.Controllers.v1.HealthController.Get(System.Boolean)">
            <summary>
                Get Health
            </summary>
            <remarks>Provides an indication about the health of the API.</remarks>
            <param name="includeDependencies">
                Indication whether or not dependencies integration should be verified.
                Do note that this will contact all dependencies which can have performance impact or cascading failures when
                consumed very often.
            </param>
            <response code="200">API is healthy</response>
            <response code="503">API is unhealthy or in degraded state</response>
        </member>
        <member name="M:Promitor.Agents.Scraper.Controllers.v1.SystemController.Get">
            <summary>
                Get System Info
            </summary>
            <remarks>Provides information concerning the Promitor Scraper Agent</remarks>
        </member>
        <member name="M:Promitor.Agents.Scraper.Extensions.IApplicationBuilderExtensions.UseMetricSinks(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.Extensions.Configuration.IConfiguration,Microsoft.Extensions.Logging.ILogger{Promitor.Agents.Scraper.Startup})">
            <summary>
                Adds the required metric sinks
            </summary>
            <param name="app">Application Builder</param>
            <param name="configuration">Configuration of the scraper agent</param>
            <param name="logger"></param>
        </member>
        <member name="M:Promitor.Agents.Scraper.Extensions.ObjectExtensions.Clone``1(``0)">
            <summary>
                Clones an object without a reference, the ugly way.
            </summary>
            <typeparam name="TObject">Type of the object to be cloned</typeparam>
            <param name="initialObject">Initial object to clone</param>
        </member>
        <member name="T:Promitor.Agents.Scraper.Scheduling.IScrapingMutex">
            <summary>
            Limits the number of threads for scraping tasks that can access the thread pool concurrently.
            </summary>
        </member>
        <member name="P:Promitor.Agents.Scraper.Scheduling.IScrapingMutex.CurrentCount">
            <summary>
            The current count of the <see cref="T:Promitor.Agents.Scraper.Scheduling.IScrapingMutex"/>.
            </summary>
        </member>
        <member name="P:Promitor.Agents.Scraper.Scheduling.IScrapingMutex.AvailableWaitHandle">
            <summary>
            Returns a <see cref="T:System.Threading.WaitHandle"/> that can be used to wait on the <see cref="T:Promitor.Agents.Scraper.Scheduling.IScrapingMutex"/>.
            </summary>
        </member>
        <member name="M:Promitor.Agents.Scraper.Scheduling.IScrapingMutex.Wait">
            <summary>
            Blocks the current thread until it can enter the <see cref="T:Promitor.Agents.Scraper.Scheduling.IScrapingMutex"/>.
            </summary>
        </member>
        <member name="M:Promitor.Agents.Scraper.Scheduling.IScrapingMutex.Wait(System.Threading.CancellationToken)">
            <summary>
            Blocks the current thread until it can enter the <see cref="T:Promitor.Agents.Scraper.Scheduling.IScrapingMutex"/>,
            while observing a <see cref="T:System.Threading.CancellationToken"/>.
            </summary>
            <param name="cancellationToken">
            The <see cref="T:System.Threading.CancellationToken"/> token to observe.
            </param>
        </member>
        <member name="M:Promitor.Agents.Scraper.Scheduling.IScrapingMutex.Wait(System.TimeSpan)">
            <summary>
            Blocks the current thread until it can enter the <see cref="T:Promitor.Agents.Scraper.Scheduling.IScrapingMutex"/>,
            using a <see cref="T:System.TimeSpan"/> to measure the time interval.
            </summary>
            <param name="timeout">
            A <see cref="T:System.TimeSpan"/> that represents the number of milliseconds to wait,
            or a <see cref="T:System.TimeSpan"/> that represents -1 milliseconds to wait indefinitely.
            </param>
            <returns>
            true if the current thread successfully entered the <see cref="T:Promitor.Agents.Scraper.Scheduling.IScrapingMutex"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:Promitor.Agents.Scraper.Scheduling.IScrapingMutex.Wait(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Blocks the current thread until it can enter the <see cref="T:Promitor.Agents.Scraper.Scheduling.IScrapingMutex"/>,
            using a <see cref="T:System.TimeSpan"/> to measure the time interval, while observing a
            <see cref="T:System.Threading.CancellationToken"/>.
            </summary>
            <param name="timeout">
            A <see cref="T:System.TimeSpan"/> that represents the number of milliseconds to wait,
            or a <see cref="T:System.TimeSpan"/> that represents -1 milliseconds to wait indefinitely.
            </param>
            <param name="cancellationToken">
            The <see cref="T:System.Threading.CancellationToken"/> to observe.
            </param>
            <returns>
            true if the current thread successfully entered the <see cref="T:Promitor.Agents.Scraper.Scheduling.IScrapingMutex"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:Promitor.Agents.Scraper.Scheduling.IScrapingMutex.Wait(System.Int32)">
            <summary>
            Blocks the current thread until it can enter the <see cref="T:Promitor.Agents.Scraper.Scheduling.IScrapingMutex"/>,
            using a 32-bit signed integer to measure the time interval.
            </summary>
            <param name="millisecondsTimeout">
            The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite"/>(-1) to wait indefinitely.
            </param>
            <returns>
            true if the current thread successfully entered the <see cref="T:Promitor.Agents.Scraper.Scheduling.IScrapingMutex"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:Promitor.Agents.Scraper.Scheduling.IScrapingMutex.Wait(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Blocks the current thread until it can enter the <see cref="T:Promitor.Agents.Scraper.Scheduling.IScrapingMutex"/>,
            using a 32-bit signed integer to measure the time interval,
            while observing a <see cref="T:System.Threading.CancellationToken"/>.
            </summary>
            <param name="millisecondsTimeout">
            The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite"/>(-1) to wait indefinitely.
            </param>
            <param name="cancellationToken">
            The <see cref="T:System.Threading.CancellationToken"/> to observe.
            </param>
            <returns>
            true if the current thread successfully entered the <see cref="T:Promitor.Agents.Scraper.Scheduling.IScrapingMutex"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:Promitor.Agents.Scraper.Scheduling.IScrapingMutex.WaitAsync">
            <summary>
            Asynchronously waits to enter the <see cref="T:Promitor.Agents.Scraper.Scheduling.IScrapingMutex"/>.
            </summary>
            <returns>A task that will complete when the semaphore has been entered.</returns>
        </member>
        <member name="M:Promitor.Agents.Scraper.Scheduling.IScrapingMutex.WaitAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously waits to enter the <see cref="T:Promitor.Agents.Scraper.Scheduling.IScrapingMutex"/>, while observing a
            <see cref="T:System.Threading.CancellationToken"/>.
            </summary>
            <returns>A task that will complete when the semaphore has been entered.</returns>
            <param name="cancellationToken">
            The <see cref="T:System.Threading.CancellationToken"/> token to observe.
            </param>
        </member>
        <member name="M:Promitor.Agents.Scraper.Scheduling.IScrapingMutex.WaitAsync(System.Int32)">
            <summary>
            Asynchronously waits to enter the <see cref="T:Promitor.Agents.Scraper.Scheduling.IScrapingMutex"/>,
            using a 32-bit signed integer to measure the time interval.
            </summary>
            <param name="millisecondsTimeout">
            The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite"/>(-1) to wait indefinitely.
            </param>
            <returns>
            A task that will complete with a result of true if the current thread successfully entered
            the <see cref="T:Promitor.Agents.Scraper.Scheduling.IScrapingMutex"/>, otherwise with a result of false.
            </returns>
        </member>
        <member name="M:Promitor.Agents.Scraper.Scheduling.IScrapingMutex.WaitAsync(System.TimeSpan)">
            <summary>
            Asynchronously waits to enter the <see cref="T:Promitor.Agents.Scraper.Scheduling.IScrapingMutex"/>,
            using a <see cref="T:System.TimeSpan"/> to measure the time interval, while observing a
            <see cref="T:System.Threading.CancellationToken"/>.
            </summary>
            <param name="timeout">
            A <see cref="T:System.TimeSpan"/> that represents the number of milliseconds
            to wait, or a <see cref="T:System.TimeSpan"/> that represents -1 milliseconds to wait indefinitely.
            </param>
            <returns>
            A task that will complete with a result of true if the current thread successfully entered
            the <see cref="T:Promitor.Agents.Scraper.Scheduling.IScrapingMutex"/>, otherwise with a result of false.
            </returns>
        </member>
        <member name="M:Promitor.Agents.Scraper.Scheduling.IScrapingMutex.WaitAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Asynchronously waits to enter the <see cref="T:Promitor.Agents.Scraper.Scheduling.IScrapingMutex"/>,
            using a <see cref="T:System.TimeSpan"/> to measure the time interval.
            </summary>
            <param name="timeout">
            A <see cref="T:System.TimeSpan"/> that represents the number of milliseconds
            to wait, or a <see cref="T:System.TimeSpan"/> that represents -1 milliseconds to wait indefinitely.
            </param>
            <param name="cancellationToken">
            The <see cref="T:System.Threading.CancellationToken"/> token to observe.
            </param>
            <returns>
            A task that will complete with a result of true if the current thread successfully entered
            the <see cref="T:Promitor.Agents.Scraper.Scheduling.IScrapingMutex"/>, otherwise with a result of false.
            </returns>
        </member>
        <member name="M:Promitor.Agents.Scraper.Scheduling.IScrapingMutex.WaitAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Asynchronously waits to enter the <see cref="T:Promitor.Agents.Scraper.Scheduling.IScrapingMutex"/>,
            using a 32-bit signed integer to measure the time interval,
            while observing a <see cref="T:System.Threading.CancellationToken"/>.
            </summary>
            <param name="millisecondsTimeout">
            The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite"/>(-1) to wait indefinitely.
            </param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to observe.</param>
            <returns>
            A task that will complete with a result of true if the current thread successfully entered
            the <see cref="T:Promitor.Agents.Scraper.Scheduling.IScrapingMutex"/>, otherwise with a result of false.
            </returns>
        </member>
        <member name="M:Promitor.Agents.Scraper.Scheduling.IScrapingMutex.Release">
            <summary>
            Exits the <see cref="T:Promitor.Agents.Scraper.Scheduling.IScrapingMutex"/> once.
            </summary>
            <returns>The previous count of the <see cref="T:Promitor.Agents.Scraper.Scheduling.IScrapingMutex"/>.</returns>
        </member>
        <member name="M:Promitor.Agents.Scraper.Scheduling.IScrapingMutex.Release(System.Int32)">
            <summary>
            Exits the <see cref="T:Promitor.Agents.Scraper.Scheduling.IScrapingMutex"/> a specified number of times.
            </summary>
            <param name="releaseCount">The number of times to exit the semaphore.</param>
            <returns>The previous count of the <see cref="T:Promitor.Agents.Scraper.Scheduling.IScrapingMutex"/>.</returns>
        </member>
        <member name="T:Promitor.Agents.Scraper.Scheduling.ResourcesScrapingJob">
            <summary>
            A metrics scraping job for one or more resources, either enumerated specifically or
            identified via resource definition groups. All metrics included are expected to have
            the same scraping schedule.
            </summary>
        </member>
        <member name="M:Promitor.Agents.Scraper.Scheduling.ResourcesScrapingJob.#ctor(System.String,Promitor.Core.Scraping.Configuration.Model.MetricsDeclaration,Promitor.Agents.Scraper.Discovery.Interfaces.IResourceDiscoveryRepository,Promitor.Core.Metrics.Sinks.MetricSinkWriter,Promitor.Core.Scraping.Factories.MetricScraperFactory,Promitor.Agents.Scraper.AzureMonitorClientFactory,Promitor.Core.Metrics.Prometheus.Collectors.Interfaces.IAzureScrapingSystemMetricsPublisher,Microsoft.Extensions.Caching.Memory.IMemoryCache,Promitor.Agents.Scraper.Scheduling.IScrapingMutex,Microsoft.Extensions.Configuration.IConfiguration,Microsoft.Extensions.Options.IOptions{Promitor.Integrations.AzureMonitor.Configuration.AzureMonitorIntegrationConfiguration},Microsoft.Extensions.Options.IOptions{Promitor.Integrations.AzureMonitor.Configuration.AzureMonitorLoggingConfiguration},Microsoft.Extensions.Logging.ILoggerFactory,Microsoft.Extensions.Logging.ILogger{Promitor.Agents.Scraper.Scheduling.ResourcesScrapingJob})">
            <summary>
            Create a metrics scraping job for one or more resources, either enumerated specifically or
            identified via resource definition groups. All metrics included are expected to have
            the same scraping schedule.
            </summary>
            <param name="jobName">name of scheduled job</param>
            <param name="metricsDeclaration">declaration of which metrics to collect from which resources</param>
            <param name="resourceDiscoveryRepository">repository source for discovering resources via criteria</param>
            <param name="metricSinkWriter">destination for metric reporting output</param>
            <param name="metricScraperFactory">means of obtaining a metrics scraper for a particular type of resource</param>
            <param name="azureMonitorClientFactory">means of obtaining a Azure Monitor client</param>
            <param name="azureScrapingSystemMetricsPublisher">metrics collector to write metrics to Prometheus</param>
            <param name="resourceMetricDefinitionMemoryCache">cache of metric definitions by resource ID</param>
            <param name="scrapingTaskMutex">semaphore used to limit concurrency of tasks if configured, or null for no limiting</param>
            <param name="configuration">Promitor configuration</param>
            <param name="azureMonitorIntegrationConfiguration">options for Azure Monitor integration</param>
            <param name="azureMonitorLoggingConfiguration">options for Azure Monitor logging</param>
            <param name="loggerFactory">means to obtain a logger</param>
            <param name="logger">logger to use for scraping detail</param>
        </member>
        <member name="M:Promitor.Agents.Scraper.Scheduling.ResourcesScrapingJob.ScheduleLimitedConcurrencyAsyncTask(System.Collections.Generic.ICollection{System.Threading.Tasks.Task},System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Run some task work in the thread pool, but only allow a limited number of threads to go at a time
            (unless max degree of parallelism wasn't configured, in which case mutex is null and no limit is imposed). 
            </summary>
        </member>
        <member name="T:Promitor.Agents.Scraper.Scheduling.ScrapingMutex">
            <inheritdoc cref="T:Promitor.Agents.Scraper.Scheduling.IScrapingMutex"/>
        </member>
        <member name="M:Promitor.Agents.Scraper.Scheduling.ScrapingMutex.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Promitor.Agents.Scraper.Scheduling.ScrapingMutex"/> class, specifying
            the number scraping tasks that can be processed concurrently.
            </summary>
            <param name="concurrency">The number scraping tasks that can be processed concurrently.</param>
        </member>
        <member name="M:Promitor.Agents.Scraper.Usability.MetricsTableGenerator.PlotOverviewInAsciiTable">
            <summary>
                Plots all configured metric information into an ASCII table
            </summary>
        </member>
        <member name="M:Promitor.Agents.Scraper.Validation.MetricDefinitions.Interfaces.IMetricValidator.Validate(Promitor.Core.Scraping.Configuration.Model.Metrics.MetricDefinition)">
            <summary>
                Validates a specific metric definition
            </summary>
            <param name="metricDefinition">Metric definition to validate</param>
            <returns>List of validation errors</returns>
        </member>
        <member name="T:Promitor.Agents.Scraper.Validation.MetricDefinitions.ResourceTypes.MariaDbMetricValidator">
            <summary>
            Validates <see cref="T:Promitor.Agents.Scraper.Validation.MetricDefinitions.ResourceTypes.MariaDbMetricValidator" /> objects.
            </summary>
        </member>
        <member name="M:Promitor.Agents.Scraper.Validation.MetricDefinitions.ResourceTypes.MariaDbMetricValidator.Validate(Promitor.Core.Scraping.Configuration.Model.Metrics.MetricDefinition)">
            <inheritdoc />
        </member>
        <member name="T:Promitor.Agents.Scraper.Validation.MetricDefinitions.ResourceTypes.SqlDatabaseMetricValidator">
            <summary>
            Validates <see cref="T:Promitor.Core.Contracts.ResourceTypes.SqlDatabaseResourceDefinition" /> objects.
            </summary>
        </member>
        <member name="M:Promitor.Agents.Scraper.Validation.MetricDefinitions.ResourceTypes.SqlDatabaseMetricValidator.Validate(Promitor.Core.Scraping.Configuration.Model.Metrics.MetricDefinition)">
            <inheritdoc />
        </member>
        <member name="T:Promitor.Agents.Scraper.Validation.MetricDefinitions.ResourceTypes.SqlElasticPoolMetricValidator">
            <summary>
            Validates <see cref="T:Promitor.Agents.Scraper.Validation.MetricDefinitions.ResourceTypes.SqlElasticPoolMetricValidator" /> objects.
            </summary>
        </member>
        <member name="M:Promitor.Agents.Scraper.Validation.MetricDefinitions.ResourceTypes.SqlElasticPoolMetricValidator.Validate(Promitor.Core.Scraping.Configuration.Model.Metrics.MetricDefinition)">
            <inheritdoc />
        </member>
        <member name="T:Promitor.Agents.Scraper.Validation.MetricDefinitions.ResourceTypes.SqlManagedInstanceMetricValidator">
            <summary>
            Validates <see cref="T:Promitor.Agents.Scraper.Validation.MetricDefinitions.ResourceTypes.SqlManagedInstanceMetricValidator" /> objects.
            </summary>
        </member>
        <member name="M:Promitor.Agents.Scraper.Validation.MetricDefinitions.ResourceTypes.SqlManagedInstanceMetricValidator.Validate(Promitor.Core.Scraping.Configuration.Model.Metrics.MetricDefinition)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IHealthChecksBuilderExtensions.AddResourceDiscoveryHealthCheck(Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
                Add health check for integration with Promitor Resource Discovery
            </summary>
            <param name="healthChecksBuilder">Builder for adding health checks</param>
            <param name="configuration">Configuration of Promitor</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IServiceCollectionExtensions.AddResourceDiscoveryClient(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
                Add the Promitor Resource Discovery client
            </summary>
            <param name="services">Collections of services in application</param>
            <param name="promitorUserAgent">User agent for Promitor</param>
            <param name="configuration"></param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IServiceCollectionExtensions.AddAtlassianStatuspageClient(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
                Add the Atlassian Statuspage client
            </summary>
            <param name="services">Collections of services in application</param>
            <param name="promitorUserAgent">User agent for Promitor</param>
            <param name="configuration">Configuration of the agent</param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IServiceCollectionExtensions.DefineDependencies(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
                Defines the dependencies that Promitor requires
            </summary>
            <param name="services">Collections of services in application</param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IServiceCollectionExtensions.AddUsability(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
                Adds usability
            </summary>
            <param name="services">Collections of services in application</param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IServiceCollectionExtensions.AddValidationRules(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
                Defines the validation for when Promitor starts up
            </summary>
            <param name="services">Collections of services in application</param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IServiceCollectionExtensions.UseMetricSinks(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration,Microsoft.Extensions.Logging.ILogger{Promitor.Agents.Scraper.Startup})">
            <summary>
                Adds the required metric sinks
            </summary>
            <param name="services">Collections of services in application</param>
            <param name="configuration">Configuration of the application</param>
            <param name="logger"></param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IServiceCollectionExtensions.AddScrapingMutex(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Adds a semaphore-based implementation of <see cref="T:Promitor.Agents.Scraper.Scheduling.IScrapingMutex"/> to the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IServiceCollectionExtensions.ConfigureYamlConfiguration(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
                Inject configuration
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SchedulingExtensions.ScheduleMetricScraping(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
                Defines to use the cron scheduler
            </summary>
            <param name="services">Collections of services in application</param>
        </member>
    </members>
</doc>
