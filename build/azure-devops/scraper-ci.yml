name: $(Date:yyyyMMdd)$(Rev:.r)
resources:
- repo: self
trigger:
- master
pr:
  branches:
    include:
    - master
  paths:
    include:
    - src/*
    - build/azure-devops/scraper-ci.yml
    - charts/promitor-agent-scraper/*
    - deploy/automation/docker-hub/ci/* # Add Docker Hub bot here to trigger it for testing sake
variables:
  DotNet.SDK.Version: '3.1.101'
  DotNet.Configuration: 'release'
  Image.Name: 'tomkerkhove/promitor-agent-scraper-ci'
  Image.TaggedName: '$(Image.Name):$(Tags.PR)'
  Helm.Chart.Version: '0.0.0-$(App.Version)'
  Helm.Chart.Name: 'promitor-agent-scraper-ci'
stages:
- stage: Init
  displayName: Prepare Build
  dependsOn: []
  jobs:
   - job: DetermineVersion
     displayName: Determine Version
     pool:
       vmImage: ubuntu-16.04
     steps:
     - powershell: |
         $prNumber = '$(System.PullRequest.PullRequestNumber)'
         $buildNumber = '$(Build.BuildNumber)'
         Write-Host "Initial build number: '$buildNumber'"
         Write-Host "PR Number '$prNumber'"
         $buildNumber = 'pr$(System.PullRequest.PullRequestNumber)'
         Write-Host "##vso[build.updatebuildnumber]$buildNumber"
         Write-Host "Build number is '$buildNumber'"
       displayName: 'Change Build Number to PR format'
       condition: eq(variables['Build.Reason'], 'PullRequest')
     - template: ./../templates/persist-variable.yml
       parameters:
        currentVariableName: 'Build.BuildNumber'
        persistedVariableName: 'App.Version'
     - publish: $(Pipeline.Workspace)/variables
       artifact: variables
- stage: Build
  dependsOn: [Init]
  jobs:
   - job: Build
     displayName: Build Codebase
     condition: succeeded()
     pool:
       vmImage: ubuntu-16.04
     steps:
     - task: DotNetCoreInstaller@0
       displayName: 'Install .NET SDK'
       inputs:
         version: '$(DotNet.SDK.Version)'
     - task: DotNetCoreCLI@2
       displayName: 'dotnet build'
       inputs:
         projects: src/Promitor.sln
         arguments: '--configuration $(DotNet.Configuration)'
     - task: CopyFiles@2
       displayName: 'Copy Build Files'
       inputs:
         contents: 'src/**'
         targetFolder: '$(Pipeline.Workspace)/build'
     - task: PublishPipelineArtifact@0
       displayName: 'Publish Build Pipeline Artifact'
       inputs:
         targetPath: '$(Pipeline.Workspace)/build'
         artifactName: Build
- stage: CodeQuality
  displayName: Code Quality
  dependsOn: [Build]
  jobs:
   - job: RunCodeQuality
     displayName: Run Code Quality
     condition: succeeded()
     pool:
       vmImage: windows-2019
     steps:
     - task: DownloadPipelineArtifact@2
       displayName: 'Download Build Artifact'
       inputs:
         artifact: 'Build'
         path: '$(Build.SourcesDirectory)'
     - task: DotNetCoreInstaller@0
       displayName: 'Import .Net Core Sdk ($(DotNet.Sdk.Version))'
       inputs:
         version: '$(DotNet.Sdk.Version)'
     - task: DotNetCoreCLI@2
       displayName: 'Restore NuGet Packages'
       inputs:
         command: restore
         projects: 'src/Promitor.sln'
     - task: ResharperCli@2
       displayName: 'Run Resharper Code Quality'
       inputs:
         solutionOrProjectPath: 'src/Promitor.sln'
         failBuildLevelSelector: 'Warning'
         commandLineInterfacePath: '$(Build.SourcesDirectory)/Lib/Resharper'
- stage: Docs
  displayName: Doc
  dependsOn: [Init]
  jobs:
   - job: RunMarkdownLinter
     displayName: Run Markdown Linter
     condition: succeeded()
     pool:
       vmImage: ubuntu-16.04
     steps:
     - script: npm install
       displayName: 'Install npm Packages'
     - script: npm run --silent markdownlint
       displayName: 'Run markdownlint'
- stage: Test
  displayName: Run Tests
  dependsOn: [Init]
  jobs:
   - job: RunUnitTests
     displayName: Run Unit Tests
     condition: succeeded()
     pool:
       vmImage: ubuntu-16.04
     steps:
     - task: DotNetCoreInstaller@0
       displayName: 'Import .Net Core Sdk ($(DotNet.Sdk.Version))'
       inputs:
         version: '$(DotNet.Sdk.Version)'
     - task: DotNetCoreCLI@2
       displayName: 'dotnet test'
       inputs:
         command: test
         projects: 'src/Promitor.Scraper.Tests.Unit/Promitor.Scraper.Tests.Unit.csproj'
         arguments: '--configuration $(DotNet.Configuration)'
- stage: Docker
  displayName: Docker Image
  dependsOn: [Init]
  variables:
    Tags.PR: '$(App.Version)-$(OS.Name)'
    Tags.Experimental: 'experimental-$(OS.Name)'
    Image.Experimental: 'docker.pkg.github.com/tomkerkhove/promitor/promitor-agent-scraper-ci:$(Tags.Experimental)'
  jobs:
   - job: DockerBuildLinux
     displayName: Build Docker Image (Linux)
     condition: succeeded()
     pool:
       vmImage: ubuntu-16.04
     variables:
       Image.TaggedName.OSAgnostic: '$(Image.Name):$(App.Version)'
       OS.Name: 'linux'
     steps:
     - download: current
       artifact: variables
     - template: ./../templates/read-variable.yml
       parameters:
        variableName: 'App.Version'
     - ${{ if not(eq(variables['Build.Reason'], 'PullRequest')) }}:
        - template: ./../templates/build-docker-image.yml
          parameters:
             imageName: '$(Image.TaggedName)'
             tags: '--tag promitor-agent-scraper-ci'
             os: '$(OS.Name)'
     - ${{ if eq(variables['Build.Reason'], 'PullRequest') }}:
        - template: ./../templates/build-docker-image.yml
          parameters:
             imageName: '$(Image.TaggedName)'
             tags: '--tag promitor-agent-scraper-ci --tag $(Image.TaggedName.OSAgnostic) --tag docker.pkg.github.com/tomkerkhove/promitor/promitor-agent-scraper-pr:$(System.PullRequest.PullRequestNumber) --tag docker.pkg.github.com/tomkerkhove/promitor/promitor-agent-scraper-pr:$(Tags.PR)'
             os: '$(OS.Name)'
     - template: ./../templates/run-docker-image.yml
       parameters:
          volumes: '/src/metric-config.yaml:/config/metrics-declaration.yaml promitor-agent-scraper-ci'
          imageName: '$(Image.TaggedName)'
          os: '$(OS.Name)'
     - ${{ if eq(variables['Build.Reason'], 'PullRequest') }}:
        - template: ./../templates/push-docker-image.yml
          parameters:
              imageName: '$(Image.TaggedName)'
        - template: ./../templates/push-docker-image.yml
          parameters:
              imageName: '$(Image.TaggedName.OSAgnostic)'
        - template: ./../templates/push-docker-image.yml
          parameters:
              registryEndpoint: 'GitHub Package Registry - Docker (tomkerkhove)'
              imageName: 'docker.pkg.github.com/tomkerkhove/promitor/promitor-agent-scraper-pr:$(System.PullRequest.PullRequestNumber)'
        - template: ./../templates/push-docker-image.yml
          parameters:
              registryEndpoint: 'GitHub Package Registry - Docker (tomkerkhove)'
              imageName: 'docker.pkg.github.com/tomkerkhove/promitor/promitor-agent-scraper-pr:$(Tags.PR)'
     - ${{ if and(ne(variables['Build.Reason'], 'PullRequest'), eq(variables['Build.SourceBranch'], 'refs/heads/master')) }}:
        - powershell: |
            docker tag $(Image.TaggedName) $(Image.Experimental)
          displayName: 'Tag image as experimental'
          condition: and(ne(variables['Build.Reason'], 'PullRequest'), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
        - template: ./../templates/push-docker-image.yml
          parameters:
              registryEndpoint: 'GitHub Package Registry - Docker (tomkerkhove)'
              imageName: '$(Image.Experimental)'
   - job: DockerBuildWindows
     displayName: Build Docker Image (Windows)
     condition: succeeded()
     pool:
       vmImage: windows-2019
     variables:
       OS.Name: 'windows'
     steps:
     - powershell: |
         $prNumber = '$(System.PullRequest.PullRequestNumber)'
         $buildNumber = '$(Build.BuildNumber)'
         Write-Host "Initial build number: '$buildNumber'"
         Write-Host "PR Number '$prNumber'"
         $buildNumber = 'pr$(System.PullRequest.PullRequestNumber)'
         Write-Host "##vso[build.updatebuildnumber]$buildNumber"
         Write-Host "##vso[task.setvariable variable=App.Version]$buildNumber"
         Write-Host "App version & build number is '$buildNumber'"
       displayName: 'Change Build Number to PR format'
       condition: eq(variables['Build.Reason'], 'PullRequest')
     - powershell: |
         $buildNumber = '$(Build.BuildNumber)'
         Write-Host "Build number: '$buildNumber'"
         Write-Host "##vso[task.setvariable variable=App.Version]$buildNumber"
         Write-Host "App version is '$buildNumber'"
       displayName: 'Assign App Version variable'
       condition: ne(variables['Build.Reason'], 'PullRequest')
     - ${{ if not(eq(variables['Build.Reason'], 'PullRequest')) }}:
        - template: ./../templates/build-docker-image.yml
          parameters:
             imageName: '$(Image.TaggedName)'
             buildArgs: '--build-arg CONFIG_FOLDER="c:/config/"'
             tags: '--tag promitor-agent-scraper-ci --tag promitor-agent-scraper-ci-non-pr'
             os: '$(OS.Name)'
     - template: ./../templates/build-docker-image.yml
       parameters:
          imageName: '$(Image.TaggedName)'
          buildArgs: '--build-arg CONFIG_FOLDER="c:/config/"'
          tags: '--tag promitor-agent-scraper-ci'
          os: '$(OS.Name)'
     - template: ./../templates/run-docker-image.yml
       parameters:
          volumes: '$(System.DefaultWorkingDirectory)\src:c:\config promitor-agent-scraper-ci'
          imageName: '$(Image.TaggedName)'
          os: '$(OS.Name)'
     - ${{ if eq(variables['Build.Reason'], 'PullRequest') }}:
        - template: ./../templates/push-docker-image.yml
          parameters:
              imageName: '$(Image.TaggedName)'
     - ${{ if and(ne(variables['Build.Reason'], 'PullRequest'), eq(variables['Build.SourceBranch'], 'refs/heads/master')) }}:
        - powershell: |
            docker tag $(Image.TaggedName) $(Image.Experimental)
          displayName: 'Tag image as experimental'
          condition: and(ne(variables['Build.Reason'], 'PullRequest'), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
        - template: ./../templates/push-docker-image.yml
          parameters:
              registryEndpoint: 'GitHub Package Registry - Docker (tomkerkhove)'
              imageName: '$(Image.Experimental)'
- stage: Helm2
  displayName: Helm Chart (2.x)
  dependsOn: Docker
  jobs:
   - job: Helm2_x
     displayName: Helm 2.x - Lint
     condition: succeeded()
     variables:
       Helm.Version: '2.9.1'
     pool:
       vmImage: ubuntu-16.04
     steps:
     - task: HelmInstaller@0
       displayName: 'Install Helm (v$(Helm.Version))'
       inputs:
        helmVersion: '$(Helm.Version)'
        checkLatestHelmVersion: false
     - powershell: |
        helm lint promitor-agent-scraper/ --strict
       workingDirectory: charts
       displayName: 'Lint Helm Chart'
- stage: Helm3
  displayName: Helm Chart (3.x)
  dependsOn: Docker
  variables:
    Helm.Version: '3.0.0'
  jobs:
   - job: Helm3_x
     displayName: Helm 3.x - Lint, Package & Push Chart
     condition: succeeded()
     pool:
       vmImage: ubuntu-16.04
     steps:
     - task: HelmInstaller@0
       displayName: 'Install Helm (latest)'
       inputs:
        # Although it doesn't matter, since 'checkLatestHelmVersion' will get latest
        helmVersion: '$(Helm.Version)'
        checkLatestHelmVersion: true
     - download: current
       artifact: variables
     - template: ./../templates/read-variable.yml
       parameters:
        variableName: 'App.Version'
     - powershell: |
        helm lint promitor-agent-scraper/ --strict
       workingDirectory: charts
       displayName: 'Lint Helm Chart'
     - task: PowerShell@2
       displayName: 'Transform Helm Chart in CI Chart'
       inputs:
        targetType: filePath
        filePath: ./build/helm/CI/Transform-Chart.ps1
        arguments: '-chartName "$(Helm.Chart.Name)" -imageName "$(Image.Name)" -imageTag "$(App.Version)"'
        workingDirectory: 'charts'
     - task: PowerShell@2
       displayName: 'Package Helm Chart'
       inputs:
        targetType: filePath
        filePath: ./build/helm/CI/Package-Chart.ps1
        arguments: '-chartName "$(Helm.Chart.Name)" -chartVersion "$(Helm.Chart.Version)"'
        workingDirectory: 'charts'
     - task: AzureCLI@1
       displayName: 'Push Helm Chart to Azure Container Registry'
       inputs:
        azureSubscription: 'Visual Studio Enterprise (0f9d7fea-99e8-4768-8672-06a28514f77e)'
        scriptLocation: inlineScript
        inlineScript: |
         az configure --defaults acr=promitor
         az acr helm push --name promitor charts/output/$(Helm.Chart.Name)-$(Helm.Chart.Version).tgz --force
       condition: eq(variables['Build.Reason'], 'PullRequest')
     - task: PublishBuildArtifacts@1
       displayName: 'Publish Helm Chart'
       inputs:
        PathtoPublish: charts/output/$(Helm.Chart.Name)-$(Helm.Chart.Version).tgz
        ArtifactName: helm
       condition: eq(variables['Build.Reason'], 'PullRequest')