name: $(Date:yyyyMMdd)$(Rev:.r)
resources:
- repo: self
trigger:
- master
pr:
  branches:
    include:
    - master
  paths:
    include:
    - src/*
    - .azure-devops/scraper-ci.yml
    - charts/promitor-agent-scraper/*
    - deploy/automation/docker-hub/ci/* # Add Docker Hub bot here to trigger it for testing sake
variables:
  DotNet.SDK.Version: '2.2.401'
  DotNet.Configuration: 'release'
  Image.Name: 'tomkerkhove/promitor-agent-scraper-ci'
  Image.TaggedName: '$(Image.Name):$(Build.BuildNumber)'
stages:
- stage: Build
  dependsOn: []
  jobs:
   - job: Build
     displayName: Build Codebase
     condition: succeeded()
     pool:
       vmImage: ubuntu-16.04
     steps:
     - task: DotNetCoreInstaller@0
       displayName: 'Install .NET SDK'
       inputs:
         version: '$(DotNet.SDK.Version)'
     - task: DotNetCoreCLI@2
       displayName: 'dotnet build'
       inputs:
         projects: src/Promitor.sln
         arguments: '--configuration $(DotNet.Configuration)'
     - task: CopyFiles@2
       displayName: 'Copy Build Files'
       inputs:
         contents: 'src/**'
         targetFolder: '$(Pipeline.Workspace)/build'
     - task: PublishPipelineArtifact@0
       displayName: 'Publish Build Pipeline Artifact'
       inputs:
         targetPath: '$(Pipeline.Workspace)/build'
         artifactName: Build
- stage: CodeQuality
  displayName: Code Quality
  dependsOn: [Build]
  jobs:
   - job: RunCodeQuality
     displayName: Run Code Quality
     condition: succeeded()
     pool:
       vmImage: windows-2019
     steps:
     - task: DownloadPipelineArtifact@2
       displayName: 'Download Build Artifact'
       inputs:
         artifact: 'Build'
         path: '$(Build.SourcesDirectory)'
     - task: DotNetCoreInstaller@0
       displayName: 'Import .Net Core Sdk ($(DotNet.Sdk.Version))'
       inputs:
         version: '$(DotNet.Sdk.Version)'
     - task: DotNetCoreCLI@2
       displayName: 'Restore NuGet Packages'
       inputs:
         command: restore
         projects: 'src/Promitor.sln'
     - task: alanwales.resharper-code-analysis.custom-build-task.ResharperCli@1
       inputs:
         SolutionOrProjectPath: 'src/Promitor.sln'
         AdditionalArguments: '/disable-settings-layers:SolutionPersonal --properties:Configuration=$(Build.Configuration)'
       env:
         MSBuildSDKsPath: '$(Agent.ToolsDirectory)/dncs/$(DotNet.Sdk.Version)/x64/sdk/$(DotNet.Sdk.Version)/Sdks'
- stage: Test
  displayName: Run Tests
  dependsOn: []
  jobs:
   - job: RunUnitTests
     displayName: Run Unit Tests
     condition: succeeded()
     pool:
       vmImage: ubuntu-16.04
     steps:
     - task: DotNetCoreCLI@2
       displayName: 'dotnet test'
       inputs:
         command: test
         projects: 'src/Promitor.Scraper.Tests.Unit/Promitor.Scraper.Tests.Unit.csproj'
         arguments: '--configuration $(DotNet.Configuration)'
- stage: Docker
  displayName: Docker Image
  dependsOn: []
  jobs:
   - job: DockerBuild
     displayName: Build Docker Image Tests
     condition: succeeded()
     pool:
       vmImage: ubuntu-16.04
     steps:
     - powershell: |
         $prNumber = '$(System.PullRequest.PullRequestNumber)'
         $buildNumber = '$(Build.BuildNumber)'
         Write-Host "Initial build number: '$buildNumber'"
         Write-Host "PR Number '$prNumber'"
         $buildNumber = 'PR$(System.PullRequest.PullRequestNumber)'
         Write-Host "##vso[build.updatebuildnumber]$buildNumber"
         Write-Host "Build number is '$buildNumber'"
       displayName: 'Change Build Number to PR format'
       condition: eq(variables['Build.Reason'], 'PullRequest')
     - task: Docker@1
       displayName: 'Build an image'
       inputs:
         containerregistrytype: 'Container Registry'
         dockerRegistryEndpoint: 'Docker Hub'
         dockerFile: ./src/Promitor.Scraper.Host/Dockerfile
         arguments: '--tag promitor-agent-scraper-ci --no-cache'
         useDefaultContext: false
         buildContext: ./src/
         imageName: '$(Image.TaggedName)'
         addDefaultLabels: false
     - task: Docker@1
       displayName: 'Run an image'
       inputs:
         containerregistrytype: 'Container Registry'
         dockerRegistryEndpoint: 'Docker Hub'
         command: 'Run an image'
         imageName: '$(Image.TaggedName)'
         containerName: 'promitor-ci'
         ports: '8999:80'
         volumes: '/src/metric-config.yaml:/config/metrics-declaration.yaml promitor-agent-scraper-ci'
         envVars: |
          PROMITOR_AUTH_APPID='$(Container.Env.AzureMonitor.Id)'
          PROMITOR_AUTH_APPKEY='$(Container.Env.AzureMonitor.Key)'
     - task: Docker@1
       displayName: 'Push ''$(Image.Name)'' image to Docker Hub'
       inputs:
         containerregistrytype: 'Container Registry'
         dockerRegistryEndpoint: 'Docker Hub'
         command: 'Push an image'
         imageName: '$(Image.TaggedName)'
       condition: eq(variables['Build.Reason'], 'PullRequest')
- stage: Helm
  displayName: Helm Chart
  dependsOn: Docker
  jobs:
   - job: HelmChart
     displayName: Lint, Package & Push Chart
     condition: succeeded()
     variables:
       Helm.Chart.Version: '0.0.0-$(Build.BuildNumber)'
       Helm.Chart.Name: 'promitor-agent-scraper-ci'
     pool:
       vmImage: ubuntu-16.04
     steps:
     - task: HelmInstaller@0
       inputs:
        helmVersion: '2.9.1'
     - powershell: |
         $prNumber = '$(System.PullRequest.PullRequestNumber)'
         $buildNumber = '$(Build.BuildNumber)'
         Write-Host "Initial build number: '$buildNumber'"
         Write-Host "PR Number '$prNumber'"
         $buildNumber = 'PR$(System.PullRequest.PullRequestNumber)'
         Write-Host "##vso[build.updatebuildnumber]$buildNumber"
         Write-Host "Build number is '$buildNumber'"
       displayName: 'Change Build Number to PR format'
       condition: eq(variables['Build.Reason'], 'PullRequest')
     - powershell: |
        helm lint promitor-agent-scraper/ --strict
       workingDirectory: charts
       displayName: 'Lint Helm Chart'
     - task: PowerShell@2
       displayName: 'Transform Helm Chart in CI Chart'
       inputs:
        targetType: filePath
        filePath: ./build/helm/CI/Transform-Chart.ps1
        arguments: '-chartName "$(Helm.Chart.Name)" -imageName "$(Image.Name)" -imageTag "$(Build.BuildNumber)"'
        workingDirectory: 'charts'
     - task: PowerShell@2
       displayName: 'Package Helm Chart'
       inputs:
        targetType: filePath
        filePath: ./build/helm/CI/Package-Chart.ps1
        arguments: '-chartName "$(Helm.Chart.Name)" -chartVersion "$(Helm.Chart.Version)"'
        workingDirectory: 'charts'
     - task: AzureCLI@1
       displayName: 'Push Helm Chart to Azure Container Registry'
       inputs:
        azureSubscription: 'Visual Studio Enterprise (0f9d7fea-99e8-4768-8672-06a28514f77e)'
        scriptLocation: inlineScript
        inlineScript: |
         az configure --defaults acr=promitor
         az acr helm push --name promitor charts/output/$(Helm.Chart.Name)-$(Helm.Chart.Version).tgz --force
       condition: eq(variables['Build.Reason'], 'PullRequest')
     - task: PublishBuildArtifacts@1
       displayName: 'Publish Helm Chart'
       inputs:
        PathtoPublish: charts/output/$(Helm.Chart.Name)-$(Helm.Chart.Version).tgz
        ArtifactName: helm
       condition: eq(variables['Build.Reason'], 'PullRequest')