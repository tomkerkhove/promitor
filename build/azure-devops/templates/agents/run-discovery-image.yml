parameters:
  imageName: ''
  containerName: ''
  containerPort: ''
  activeDirectoryAppId: ''
  activeDirectoryAppSecret: ''
  volumes: ''
  networkName: ''
  os: ''

steps:
- bash: |
    echo "Variable 'imageName' found with value '$IMAGE_NAME'"
    if [ -z "$IMAGE_NAME" ]; then
      echo "##vso[task.logissue type=error;]Missing template parameter \"imageName\""
      echo "##vso[task.complete result=Failed;]"
    fi
    echo "Variable 'containerName' found with value '$CONTAINER_NAME'"
    if [ -z "$CONTAINER_NAME" ]; then
      echo "##vso[task.logissue type=error;]Missing template parameter \"containerName\""
      echo "##vso[task.complete result=Failed;]"
    fi
    echo "Variable 'containerPort' found with value '$CONTAINER_PORT'"
    if [ -z "$CONTAINER_PORT" ]; then
      echo "##vso[task.logissue type=error;]Missing template parameter \"containerPort\""
      echo "##vso[task.complete result=Failed;]"
    fi
    echo "Variable 'volumes' found with value '$VOLUMES'"
    if [ -z "$VOLUMES" ]; then
      echo "##vso[task.logissue type=error;]Missing template parameter \"volumes\""
      echo "##vso[task.complete result=Failed;]"
    fi
    echo "Variable 'activeDirectoryAppId' found with value '$DISCOVERY_APP_ID'"
    if [ -z "$DISCOVERY_APP_ID" ]; then
      echo "##vso[task.logissue type=error;]Missing template parameter \"activeDirectoryAppId\""
      echo "##vso[task.complete result=Failed;]"
    fi
    if [ -z "$DISCOVERY_APP_SECRET" ]; then
      echo "##vso[task.logissue type=error;]Missing template parameter \"activeDirectoryAppSecret\""
      echo "##vso[task.complete result=Failed;]"
    fi
    echo "Variable 'os' found with value '$OS'"
    if [ -z "$OS" ]; then
      echo "##vso[task.logissue type=error;]Missing template parameter \"os\""
      echo "##vso[task.complete result=Failed;]"
    fi
  env:
    IMAGE_NAME: ${{ parameters.imageName }}
    CONTAINER_NAME: ${{ parameters.containerName }}
    CONTAINER_PORT: ${{ parameters.containerPort }}
    VOLUMES: ${{ parameters.volumes }}
    DISCOVERY_APP_ID: ${{ parameters.activeDirectoryAppId }}
    DISCOVERY_APP_SECRET: ${{ parameters.activeDirectoryAppSecret }}
    OS: ${{ parameters.os }}
  displayName: Check for required parameters in YAML template
- powershell: |
    $networkArgument = '';
    if ('${{ parameters.networkName }}' -ne '') {
      $networkArgument = '--network ${{ parameters.networkName }}';
      Write-Host "Network command = $networkArgument"
    }
    Write-Host "##vso[task.setvariable variable=networkArgument]$networkArgument"
  displayName: 'Determine if a network is required'
- script: |
      echo Mounting volumes: ${{ parameters.volumes }}
      docker run -d -p ${{ parameters.containerPort }}:99 --name ${{ parameters.containerName }} $(networkArgument) --env PROMITOR_AUTH_APPID=${{ parameters.activeDirectoryAppId }} --env PROMITOR_AUTH_APPKEY=${{ parameters.activeDirectoryAppSecret }} --volume ${{ parameters.volumes }} ${{ parameters.imageName }}
      sleep 10
      docker logs ${{ parameters.containerName }}
  displayName: Run Resource Discovery image as ${{ parameters.containerName }} container on ${{ parameters.os }}
  failOnStderr: true