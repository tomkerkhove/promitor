name: $(Date:yyyyMMdd)$(Rev:.r)
resources:
- repo: self
trigger:
- master
pr:
  branches:
    include:
    - master
  paths:
    include:
    - src/*
    - build/azure-devops/agents-ci-discovery.yml
variables:
  - template: ./variables/build.yml
  - name: Image.Name
    value: 'tomkerkhove/promitor-agent-discovery-ci'
  - name: Image.TaggedName
    value: '$(Image.Name):$(Tags.PR)'
  - name: Container.Name
    value: 'promitor-discovery-agent'
stages:
- stage: Init
  displayName: Prepare Build
  dependsOn: []
  jobs:
   - job: DetermineVersion
     displayName: Determine Version
     pool:
       vmImage: ubuntu-16.04
     steps:
     - ${{ if eq(variables['Build.Reason'], 'PullRequest') }}:
        - template: ./../templates/determine-pr-version.yml
     - template: ./../templates/persist-variable.yml
       parameters:
        currentVariableName: 'Build.BuildNumber'
        persistedVariableName: 'App.Version'
     - publish: $(Pipeline.Workspace)/variables
       artifact: variables
- stage: Build
  dependsOn: [Init]
  jobs:
   - job: Build
     displayName: Build Codebase
     condition: succeeded()
     pool:
       vmImage: ubuntu-16.04
     steps:
     - template: ./../templates/build-solution.yml
       parameters:
        dotnetVersion: '$(DotNet.SDK.Version)'
        buildConfiguration: '$(DotNet.Configuration)'
        targetFolder: '$(Pipeline.Workspace)/build'
     - task: PublishPipelineArtifact@0
       displayName: 'Publish Build Pipeline Artifact'
       inputs:
         targetPath: '$(Pipeline.Workspace)/build'
         artifactName: Build
- stage: CodeQuality
  displayName: Code Quality
  dependsOn: [Init]
  jobs:
   - job: RunCodeQuality
     displayName: Run Code Quality
     condition: succeeded()
     pool:
       vmImage: windows-2019
     steps:
     - template: ./../templates/run-code-quality.yml
       parameters:
        dotnetVersion: '$(DotNet.Sdk.Version)'
- stage: Test
  displayName: Run Tests
  dependsOn: [Init]
  jobs:
   - job: RunUnitTests
     displayName: Run Unit Tests
     condition: succeeded()
     pool:
       vmImage: ubuntu-16.04
     steps:
     - template: ./../templates/run-unit-tests.yml
       parameters:
        dotnetVersion: '$(DotNet.Sdk.Version)'
        buildConfiguration: '$(DotNet.Configuration)'
- stage: Docker
  displayName: Docker Image
  dependsOn: [Init]
  variables:
    Tags.PR: '$(App.Version)-$(OS.Name)'
    Container.Port: 8888
    Agent.ResourceDiscovery.BaseUrl: http://localhost:$(Container.Port)
    Agent.Auth.AppId: 67882a00-21d3-4ee7-b32a-430ea0768cd3
    # Agent.Auth.AppSecret is added on the pipeline config
  jobs:
   - job: DockerBuildLinux
     displayName: Build Docker Image (Linux)
     condition: succeeded()
     pool:
       vmImage: ubuntu-16.04
     variables:
       Image.TaggedName.OSAgnostic: '$(Image.Name):$(App.Version)'
       Tags.Experimental: 'experimental-$(OS.Name)'
       Image.Experimental: 'docker.pkg.github.com/tomkerkhove/promitor/promitor-agent-discovery-ci:$(Tags.Experimental)'
       OS.Name: 'linux'
     steps:
     - download: current
       artifact: variables
     - template: ./../templates/read-variable.yml
       parameters:
        variableName: 'App.Version'
     - ${{ if not(eq(variables['Build.Reason'], 'PullRequest')) }}:
        - template: ./../templates/build-discovery-image.yml
          parameters:
             imageName: '$(Image.TaggedName)'
             tags: '--tag promitor-agent-discovery-ci'
             os: '$(OS.Name)'
     - ${{ if eq(variables['Build.Reason'], 'PullRequest') }}:
        - template: ./../templates/build-discovery-image.yml
          parameters:
             imageName: '$(Image.TaggedName)'
             tags: '--tag promitor-agent-discovery-ci --tag $(Image.TaggedName.OSAgnostic) --tag docker.pkg.github.com/tomkerkhove/promitor/promitor-agent-discovery-pr:$(System.PullRequest.PullRequestNumber) --tag docker.pkg.github.com/tomkerkhove/promitor/promitor-agent-discovery-pr:$(Tags.PR)'
             os: '$(OS.Name)'
     - script: |
         echo What images are around?
         docker images
         echo What's running?
         docker ps
       displayName: Run image on Linux
       failOnStderr: true
     - template: ./../templates/run-discovery-image.yml
       parameters:
          imageName: '$(Image.TaggedName)'
          containerName: '$(Container.Name)'
          containerPort: '$(Container.Port)'
          volumes: '$(Pipeline.Workspace)/s/tests/discovery-config.yaml:/config/resource-discovery-declaration.yaml'
          discoveryAppId: '$(Agent.Auth.AppId)'
          discoveryAppSecret: '$(Agent.Auth.AppSecret)'
          os: '$(OS.Name)'
     - template: ./../templates/run-integration-tests.yml
       parameters:
        dotnetVersion: '$(DotNet.Sdk.Version)'
        buildConfiguration: '$(DotNet.Configuration)'
     - task: Bash@3
       inputs:
         targetType: 'inline'
         script: |
           docker logs $(Container.Name)
         failOnStderr: true
       displayName: Show promitor-discovery-agent logs
       condition: always()
     - ${{ if eq(variables['Build.Reason'], 'PullRequest') }}:
        - template: ./../templates/push-docker-image.yml
          parameters:
              imageName: '$(Image.TaggedName)'
        - template: ./../templates/push-docker-image.yml
          parameters:
              imageName: '$(Image.TaggedName.OSAgnostic)'
        - template: ./../templates/push-docker-image.yml
          parameters:
              registryEndpoint: 'GitHub Package Registry - Docker (tomkerkhove)'
              imageName: 'docker.pkg.github.com/tomkerkhove/promitor/promitor-agent-discovery-pr:$(System.PullRequest.PullRequestNumber)'
        - template: ./../templates/push-docker-image.yml
          parameters:
              registryEndpoint: 'GitHub Package Registry - Docker (tomkerkhove)'
              imageName: 'docker.pkg.github.com/tomkerkhove/promitor/promitor-agent-discovery-pr:$(Tags.PR)'
     - ${{ if and(ne(variables['Build.Reason'], 'PullRequest'), eq(variables['Build.SourceBranch'], 'refs/heads/master')) }}:
        - powershell: |
            docker tag $(Image.TaggedName) $(Image.Experimental)
          displayName: 'Tag image as experimental'
        - template: ./../templates/push-docker-image.yml
          parameters:
              registryEndpoint: 'GitHub Package Registry - Docker (tomkerkhove)'
              imageName: '$(Image.Experimental)'
   - job: DockerBuildWindows
     displayName: Build Docker Image (Windows)
     condition: succeeded()
     pool:
       vmImage: windows-2019
     variables:
       OS.Name: 'windows'
     steps:
     - ${{ if eq(variables['Build.Reason'], 'PullRequest') }}:
        - template: ./../templates/determine-pr-version.yml
     - ${{ if not(eq(variables['Build.Reason'], 'PullRequest')) }}:
        - powershell: |
            $buildNumber = '$(Build.BuildNumber)'
            Write-Host "Build number: '$buildNumber'"
            Write-Host "##vso[task.setvariable variable=App.Version]$buildNumber"
            Write-Host "App version is '$buildNumber'"
          displayName: 'Assign App Version variable'
     - ${{ if not(eq(variables['Build.Reason'], 'PullRequest')) }}:
        - template: ./../templates/build-discovery-image.yml
          parameters:
             imageName: '$(Image.TaggedName)'
             buildArgs: '--build-arg CONFIG_FOLDER="c:/config/"'
             tags: '--tag promitor-agent-discovery-ci'
             os: '$(OS.Name)'
     - ${{ if eq(variables['Build.Reason'], 'PullRequest') }}:
        - template: ./../templates/build-discovery-image.yml
          parameters:
             imageName: '$(Image.TaggedName)'
             tags: '--tag promitor-agent-discovery-ci --tag $(Image.TaggedName.OSAgnostic) --tag docker.pkg.github.com/tomkerkhove/promitor/promitor-agent-discovery-pr:$(System.PullRequest.PullRequestNumber) --tag docker.pkg.github.com/tomkerkhove/promitor/promitor-agent-discovery-pr:$(Tags.PR)'
             os: '$(OS.Name)'
     - task: PowerShell@2
       displayName: Run Resource Discovery image as $(Container.Name) container on $(OS.Name)
       inputs:
         targetType: 'inline'
         script: |
           docker run -d -p $(Container.Port):80 --name $(Container.Name) --env DISCOVERY_APPID='$(Agent.Auth.AppId)' --env DISCOVERY_APPSECRET='$(Agent.Auth.AppSecret)' --volume $(System.DefaultWorkingDirectory)\tests\discovery-config.yaml:c:\config\resource-discovery-declaration.yaml $(Image.TaggedName)
           sleep 10
           docker logs $(Container.Name)
         failOnStderr: true
     - task: PowerShell@2
       displayName: Run Resource Discovery image as $(Container.Name) container on $(OS.Name)
       inputs:
         targetType: 'inline'
         script: |
           docker run -d -p $(Container.Port):80 --name $(Container.Name)2 --env DISCOVERY_APPID='$(Agent.Auth.AppId)' --env DISCOVERY_APPSECRET='$(Agent.Auth.AppSecret)' --volume $(System.DefaultWorkingDirectory)\tests\:c:\config\ $(Image.TaggedName)
           sleep 10
           docker logs $(Container.Name)2
         failOnStderr: true
       condition: always()
     - template: ./../templates/run-integration-tests.yml
       parameters:
        dotnetVersion: '$(DotNet.Sdk.Version)'
        buildConfiguration: '$(DotNet.Configuration)'
     - task: PowerShell@2
       displayName: Show promitor-discovery-agent logs
       inputs:
         targetType: 'inline'
         script: |
           docker logs promitor-discovery-agent
         failOnStderr: true
       condition: always()
     - task: PowerShell@2
       displayName: Show promitor-discovery-agent2 logs
       inputs:
         targetType: 'inline'
         script: |
           docker logs promitor-discovery-agent2
         failOnStderr: true
       condition: always()
     - ${{ if eq(variables['Build.Reason'], 'PullRequest') }}:
        - template: ./../templates/push-docker-image.yml
          parameters:
              imageName: '$(Image.TaggedName)'